MAD LIBS
##########################################################
2.
Name = input("Enter a Name:")
plural_noun = input ("Enter a Plural noun:")
country = input("Enter a country:")

print ("Hi " + Name +" welcome ")
print (plural_noun + " a good day ")
print ("I love " + country)



Output:
Enter a Name:Tino
Enter a Plural noun:have
Enter a country:India
Hi Tino welcome 
have a good day
I love India

############################################################
1.
colour = input("Enter a colour:")
plural_noun = input ("Enter a PLural noun:")
celebrity = input("Enter a celebrity:")

print ("Rose are " + colour)
print (plural_noun + " are blue")
print ("I love " + celebrity)

output

    Enter a colour:Red
    Enter a PLural noun:sky
    Enter a celebrity:Rock
    Rose are Red
    sky are blue
    I love Rock


#############################################################
guess number 

import random

num =random.randint(1, 20)

guess =int(input("can you guess the number!its bleow 20 "))

while num != guess:
    if guess > num:
        print("your guess in higher")
    else:
        print("your guess is lower")
    guess =int(input("guess agian:"))
print ("you won")


output 
    can you guess the number!its bleow 20 12
    your guess in higher
    guess agian:2
    your guess is lower
    guess agian:5
    your guess is lower
    guess agian:15
    your guess in higher
    guess agian:11
    you won

####################################################
ROCK PAPER SICESSOR GAME

import random

options = ['rock','paper','scissors']
comp = random.choice( options )
player = input("Enter your choice: ")

if player == comp:
      print("It is tie")
else:
      if player == 'rock':
            if comp == 'paper':
                  print("computer won,bcz it chose paper")
            else:
                   print("player won, bcz computer chose")

      elif player =='paper':
            if comp == "rock":
                  print("player won bcz computer chose")
            else:
                  print("computer won ,it chose scissors")
      
      elif player =='scissors':
            if comp == 'rock':
                  print("computer won,it chose rock")
            else:
                  print("player won bcz computer chose")



OUTPUT 
    SYNTAX ERROR

####################################################################
ROCK PAPER SCISSORS

import random

while True:
    choices = ["rock","paper","scissors"]

    computer = random.choice(choices)
    player = None

    while player not in choices:
        player = input("rock, paper, or scissors?: ")

    if player == computer:
        print("computer: ",computer)
        print("player: ",player)
        print("Tie!")

    elif player == "rock":
        if computer == "paper":
            print("computer: ", computer)
            print("player: ", player)
            print("You lose!")
        if computer == "scissors":
            print("computer: ", computer)
            print("player: ", player)
            print("You win!")

    elif player == "scissors":
        if computer == "rock":
            print("computer: ", computer)
            print("player: ", player)
            print("You lose!")
        if computer == "paper":
            print("computer: ", computer)
            print("player: ", player)
            print("You win!")

    elif player == "paper":
        if computer == "scissors":
            print("computer: ", computer)
            print("player: ", player)
            print("You lose!")
        if computer == "rock":
            print("computer: ", computer)
            print("player: ", player)
            print("You win!")

    play_again = input("Play again? (yes/no): ")

    if play_again != "yes":
        break

output
    rock, paper, or scissors?: rock
    computer:  rock
    player:  rock
    Tie!
    Play again? (yes/no): yes
    rock, paper, or scissors?: paper
    computer:  rock
    player:  paper
    You win!
    Play again? (yes/no): yes
    computer:  paper
    player:  scissors
    You win!
    Play again? (yes/no): yes
    rock, paper, or scissors?: rock
    computer:  paper
    player:  rock
    You lose!
    
    ###############################################################
    countdown
import time

def countdown(time_sec):
    while time_sec:
        mins, secs = divmod(time_sec, 60)
        timeformat = '{:02d}:{:02d}'.format(mins, secs)
        print(timeformat, end='\r')
        time.sleep(1)
        time_sec -= 1

    print("stop")

countdown(15)


output 
00:15 (15 counts)


################################################################################
password generator 


from random import choice, sample

letters_lower = "abcdefghijklmnopqrstuvwxyz"
letters_upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
numbers = "0123456789"
special_chars = "~!@#$%^&*()_+-{}[]"

pool_all_chars = letters_lower + letters_upper + numbers + special_chars

lower_1 = choice(letters_lower)
lower_2 = choice(letters_lower)
upper_1 = choice(letters_upper)
upper_2 = choice(letters_upper)
num_1 = choice(numbers)
sp_char_1 = choice(special_chars)

ex_char_1 = choice(pool_all_chars)
ex_char_2 = choice(pool_all_chars)
ex_char_3 = choice(pool_all_chars)
ex_char_4 = choice(pool_all_chars)

temp_pwd = lower_1 + lower_2 + upper_1 + upper_2 + num_1 + sp_char_1 + ex_char_1 + ex_char_2 + ex_char_3 + ex_char_4
print("".join(sample(temp_pwd, len(temp_pwd))))



output
sljPZ+MSj3



########################################################################################


import random


class TicTacToe:

    def __init__(self):
        self.board = []

    def create_board(self):
        for i in range(3):
            row = []
            for j in range(3):
                row.append('-')
            self.board.append(row)

    def get_random_first_player(self):
        return random.randint(0, 1)

    def fix_spot(self, row, col, player):
        self.board[row][col] = player

    def is_player_win(self, player):
        win = None

        n = len(self.board)

     
        for i in range(n):
            win = True
            for j in range(n):
                if self.board[i][j] != player:
                    win = False
                    break
            if win:
                return win

 
        for i in range(n):
            win = True
            for j in range(n):
                if self.board[j][i] != player:
                    win = False
                    break
            if win:
                return win

     
        win = True
        for i in range(n):
            if self.board[i][i] != player:
                win = False
                break
        if win:
            return win

        win = True
        for i in range(n):
            if self.board[i][n - 1 - i] != player:
                win = False
                break
        if win:
            return win
        return False

        for row in self.board:
            for item in row:
                if item == '-':
                    return False
        return True

    def is_board_filled(self):
        for row in self.board:
            for item in row:
                if item == '-':
                    return False
        return True

    def swap_player_turn(self, player):
        return 'X' if player == 'O' else 'O'

    def show_board(self):
        for row in self.board:
            for item in row:
                print(item, end=" ")
            print()

    def start(self):
        self.create_board()

        player = 'X' if self.get_random_first_player() == 1 else 'O'
        while True:
            print(f"Player {player} turn")

            self.show_board()

           
            row, col = list(
                map(int, input("Enter row and column numbers to fix spot: ").split()))
            print()

           
            self.fix_spot(row - 1, col - 1, player)

           
            if self.is_player_win(player):
                print(f"Player {player} wins the game!")
                break

           
            if self.is_board_filled():
                print("Match Draw!")
                break

           
            player = self.swap_player_turn(player)

       
        print()
        self.show_board()


tic_tac_toe = TicTacToe()
tic_tac_toe.start()

output :

